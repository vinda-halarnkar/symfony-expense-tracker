
services:
  php:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: symfony_php
    volumes:
      - .:/var/www/html
    working_dir: /var/www/html
    depends_on:
      - database_et
    command: /bin/bash -c "composer install && php-fpm"
  nginx:
    image: nginx:stable
    container_name: symfony_nginx
    ports:
      - "8082:80"
    volumes:
      - .:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
  database_et:
    image: mysql:8.0
    container_name: symfony_et_mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # POSTGRES_DB: ${POSTGRES_DB:-app}
      # # You should definitely change the password in production
      # POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      # POSTGRES_USER: ${POSTGRES_USER:-app}
    # healthcheck:
    #   test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
    #   timeout: 5s
    #   retries: 5
    #   start_period: 60s
    ports:
      - "3309:3306"
    volumes:
      - database_et_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
###> doctrine/doctrine-bundle ###
  database_et_data:
###< doctrine/doctrine-bundle ###
